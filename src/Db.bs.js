// Generated by BUCKLESCRIPT VERSION 4.0.6, PLEASE EDIT WITH CARE
'use strict';

var $$Map = require("bs-platform/lib/js/map.js");
var Block = require("bs-platform/lib/js/block.js");
var Curry = require("bs-platform/lib/js/curry.js");
var Future = require("reason-future/src/Future.bs.js");
var Caml_obj = require("bs-platform/lib/js/caml_obj.js");
var Json_decode = require("@glennsl/bs-json/src/Json_decode.bs.js");
var Json_encode = require("@glennsl/bs-json/src/Json_encode.bs.js");

function compare(p1, p2) {
  return p1[/* id */0] - p2[/* id */0] | 0;
}

function decode(json) {
  return /* record */[
          /* id */Json_decode.field("id", Json_decode.$$int, json),
          /* name */Json_decode.field("name", Json_decode.string, json)
        ];
}

function encode(person) {
  return Json_encode.object_(/* :: */[
              /* tuple */[
                "id",
                person[/* id */0]
              ],
              /* :: */[
                /* tuple */[
                  "name",
                  person[/* name */1]
                ],
                /* [] */0
              ]
            ]);
}

var Person = /* module */[
  /* compare */compare,
  /* decode */decode,
  /* encode */encode
];

var compare$1 = Caml_obj.caml_compare;

var Int = /* module */[/* compare */compare$1];

var IntMap = $$Map.Make(Int);

var store = IntMap[/* empty */0];

function add(person, store) {
  var m = Curry._3(IntMap[/* add */3], person[/* id */0], encode(person), store);
  return Future.value(/* Ok */Block.__(0, [m]));
}

exports.Person = Person;
exports.Int = Int;
exports.IntMap = IntMap;
exports.store = store;
exports.add = add;
/* IntMap Not a pure module */
