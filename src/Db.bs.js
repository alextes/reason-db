// Generated by ReScript, PLEASE EDIT WITH CARE
'use strict';

var Curry = require("bs-platform/lib/js/curry.js");
var Js_exn = require("bs-platform/lib/js/js_exn.js");
var Belt_MapInt = require("bs-platform/lib/js/belt_MapInt.js");
var Belt_Option = require("bs-platform/lib/js/belt_Option.js");
var Belt_Result = require("bs-platform/lib/js/belt_Result.js");
var Decode_AsResult_OfParseError = require("bs-decode/src/Decode_AsResult_OfParseError.bs.js");

function make(id, name) {
  return {
          id: id,
          name: name
        };
}

function decode(json) {
  return Curry._2(Decode_AsResult_OfParseError.Pipeline.run, json, Curry._3(Decode_AsResult_OfParseError.Pipeline.field, "name", Decode_AsResult_OfParseError.string, Curry._3(Decode_AsResult_OfParseError.Pipeline.field, "id", Decode_AsResult_OfParseError.intFromNumber, Curry._1(Decode_AsResult_OfParseError.Pipeline.succeed, make))));
}

function encode(person) {
  return JSON.stringify(person);
}

function encodet(person) {
  return Belt_Option.getExn(JSON.stringify(person));
}

var Person = {
  make: make,
  decode: decode,
  encode: encode,
  encodet: encodet
};

function make$1(id, name) {
  return {
          id: id,
          name: name
        };
}

function colorToStr(color) {
  if (color) {
    return "white";
  } else {
    return "black";
  }
}

function strToColor(str) {
  switch (str) {
    case "black" :
        return /* Black */0;
    case "white" :
        return /* White */1;
    default:
      return Js_exn.raiseError("Unknown color");
  }
}

function decode$1(json) {
  return Curry._2(Decode_AsResult_OfParseError.Pipeline.run, json, Curry._3(Decode_AsResult_OfParseError.Pipeline.field, "name", (function (name) {
                    return Belt_Result.map(Curry._1(Decode_AsResult_OfParseError.string, name), strToColor);
                  }), Curry._3(Decode_AsResult_OfParseError.Pipeline.field, "id", Decode_AsResult_OfParseError.intFromNumber, Curry._1(Decode_AsResult_OfParseError.Pipeline.succeed, make$1))));
}

function encode$1(color) {
  return JSON.stringify(color);
}

function encodet$1(color) {
  return Belt_Option.getExn(JSON.stringify(color));
}

var Color = {
  make: make$1,
  colorToStr: colorToStr,
  strToColor: strToColor,
  decode: decode$1,
  encode: encode$1,
  encodet: encodet$1
};

var personStore = {
  contents: undefined
};

var colorStore = {
  contents: undefined
};

function add(s) {
  if (s.TAG === /* Person */0) {
    var p = s._0;
    personStore.contents = Belt_MapInt.set(personStore.contents, p.id, Belt_Option.getExn(JSON.stringify(p)));
    return {
            TAG: /* Ok */0,
            _0: undefined
          };
  }
  var c = s._0;
  colorStore.contents = Belt_MapInt.set(colorStore.contents, c.id, Belt_Option.getExn(JSON.stringify(c)));
  return {
          TAG: /* Ok */0,
          _0: undefined
        };
}

function getPerson(key) {
  return Belt_MapInt.getExn(personStore.contents, key);
}

function getColor(key) {
  return Belt_MapInt.getExn(colorStore.contents, key);
}

var D;

exports.D = D;
exports.Person = Person;
exports.Color = Color;
exports.personStore = personStore;
exports.colorStore = colorStore;
exports.add = add;
exports.getPerson = getPerson;
exports.getColor = getColor;
/* Decode_AsResult_OfParseError Not a pure module */
